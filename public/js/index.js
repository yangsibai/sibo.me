// Generated by CoffeeScript 1.7.1
(function() {
  var ext2ModeMap;

  ext2ModeMap = {
    coffee: "coffee",
    csharp: "cs",
    css: "css",
    html: "html",
    java: "java",
    javascript: "js",
    markdown: ["md", "markdown"],
    sql: "sql",
    text: "txt"
  };

  this.codeEditor = function(editorId, type, id) {
    var editor, setLanguage, setMode, updateFileName, updateLanguageAndMode;
    editor = ace.edit(editorId);
    editor.setTheme("ace/theme/tomorrow_night_bright");
    editor.session.setMode("ace/mode/text");
    editor.getSession().setTabSize(4);
    editor.setAutoScrollEditorIntoView(true);
    editor.setOption("maxLines", 30);
    editor.setOption("minLines", 20);
    editor.setFontSize(14);
    $("#submit").click(function() {
      var content, tags, title;
      title = $("#title").val().trim();
      tags = $("#tags").val().trim();
      content = editor.getValue();
      if (type === "new") {
        return $.post("/snippets/new", {
          title: title,
          content: content,
          tags: tags
        }, function(data) {
          if (data.code === 0) {
            return window.location.href = "/snippets/single/" + data.id;
          } else {
            return alert(data.message);
          }
        });
      } else if (type === "edit") {
        return $.post("/snippets/edit/" + id, {
          title: title,
          content: content,
          tags: tags
        }, function(data) {
          if (data.code === 0) {
            return window.location.href = "/snippets/single/" + id;
          } else {
            return alert(data.message);
          }
        });
      } else {
        return alert("unknown");
      }
    });
    $(".language").change(function() {
      var modeName;
      modeName = $(this).val();
      setMode(modeName);
      return updateFileName(modeName);
    });
    $("#title").keyup(function() {
      var title;
      title = $(this).val();
      return updateLanguageAndMode(title);
    });
    $("#title").blur(function() {
      var currentTitle, trimTitle;
      currentTitle = $(this).val();
      trimTitle = currentTitle.trim();
      if (currentTitle !== trimTitle) {
        $(this).val(trimTitle);
        return updateLanguageAndMode(trimTitle);
      }
    });
    updateFileName = function(modeName) {
      var dotInx, ext, extensions, newExt, title;
      title = $("#title").val().trim();
      extensions = ext2ModeMap[modeName];
      if (title) {
        dotInx = title.lastIndexOf('.');
        if (dotInx !== -1) {
          ext = title.slice(dotInx + 1);
          if (legalExt(extensions, ext)) {
            return;
          }
          title = title.slice(0, dotInx);
        }
        newExt = Array.isArray(extensions) ? extensions[0] : extensions;
        title = "" + title + "." + newExt;
      } else {
        title = Array.isArray(extensions) ? "new-file." + extensions[0] : "new-file." + extensions;
      }
      return $("#title").val(title);
    };
    updateLanguageAndMode = function(title) {
      var mode;
      mode = getAceModeByTitle(title);
      setMode(mode);
      return setLanguage(mode);
    };
    setMode = function(modeName) {
      return editor.session.setMode("ace/mode/" + modeName);
    };
    return setLanguage = function(modeName) {
      return $(".language").val(modeName);
    };
  };

  this.legalExt = function(extensions, ext) {
    if ((Array.isArray(extensions) && extensions.indexOf(ext) !== -1) || ext === extensions) {
      return true;
    }
    return false;
  };

  this.getAceModeByTitle = function(title) {
    var dotInx, ext, key, value;
    dotInx = title.lastIndexOf('.');
    if (dotInx !== -1) {
      ext = title.slice(dotInx + 1);
      for (key in ext2ModeMap) {
        value = ext2ModeMap[key];
        if (legalExt(value, ext)) {
          return key;
        }
      }
    }
    return "text";
  };

}).call(this);

//# sourceMappingURL=index.map
