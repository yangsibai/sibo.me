// Generated by CoffeeScript 1.7.1
(function() {
  var Far, Main, Mid, Scroller, SliceType, WallSlice, WallSpritesPool, Walls,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Far = (function(_super) {
    __extends(Far, _super);

    Far.DELTA_X = 0.128;

    function Far() {
      var texture;
      texture = PIXI.Texture.fromImage("/img/game/parallas/bg-far.png");
      Far.__super__.constructor.call(this, texture, 512, 256);
      this.position.x = 0;
      this.position.y = 0;
      this.tilePosition.x = 0;
      this.tilePosition.y = 0;
      this.viewportX = 0;
    }

    Far.prototype.setViewportX = function(newViewportX) {
      var distanceTravelled;
      distanceTravelled = newViewportX - this.viewportX;
      this.viewportX = newViewportX;
      return this.tilePosition.x -= distanceTravelled * this.constructor.DELTA_X;
    };

    return Far;

  })(PIXI.TilingSprite);

  Mid = (function(_super) {
    __extends(Mid, _super);

    Mid.DELTA_X = 0.64;

    function Mid() {
      var texture;
      texture = PIXI.Texture.fromImage("/img/game/parallas/bg-mid.png");
      Mid.__super__.constructor.call(this, texture, 512, 256);
      this.position.x = 0;
      this.position.y = 128;
      this.tilePosition.x = 0;
      this.tilePosition.y = 0;
      this.viewportX = 0;
    }

    Mid.prototype.setViewportX = function(newViewportX) {
      var distanceTravelled;
      distanceTravelled = newViewportX - this.viewportX;
      this.viewportX = newViewportX;
      return this.tilePosition.x -= distanceTravelled * this.constructor.DELTA_X;
    };

    return Mid;

  })(PIXI.TilingSprite);

  Scroller = (function() {
    function Scroller(stage) {
      this.far = new Far();
      stage.addChild(this.far);
      this.mid = new Mid();
      stage.addChild(this.mid);
      this.front = new Walls();
      stage.addChild(this.front);
      this.viewportX = 0;
    }

    Scroller.prototype.setViewportX = function(viewportX) {
      this.viewportX = viewportX;
      this.far.setViewportX(viewportX);
      this.mid.setViewportX(viewportX);
      return this.front.setViewportX(viewportX);
    };

    Scroller.prototype.getViewportX = function() {
      return this.viewportX;
    };

    Scroller.prototype.moveViewportXBy = function(units) {
      var newViewportX;
      newViewportX = this.viewportX + units;
      return this.setViewportX(newViewportX);
    };

    return Scroller;

  })();

  WallSpritesPool = (function() {
    function WallSpritesPool() {
      this.createWindows();
      this.createDecorations();
      this.createFrontEdges();
      this.createBackEdges();
      this.createSteps();
    }

    WallSpritesPool.prototype.shuffle = function(array) {
      var i, len, pos, shuffles, wallSlice, _i, _results;
      len = array.length;
      shuffles = len * 3;
      _results = [];
      for (i = _i = 1; 1 <= shuffles ? _i <= shuffles : _i >= shuffles; i = 1 <= shuffles ? ++_i : --_i) {
        wallSlice = array.pop();
        pos = Math.floor(Math.random() * (len - 1));
        _results.push(array.splice(pos, 0, wallSlice));
      }
      return _results;
    };

    WallSpritesPool.prototype.createWindows = function() {
      this.windows = [];
      this.addWindowsSprites(6, "window_01");
      this.addWindowsSprites(6, "window_02");
      return this.shuffle(this.windows);
    };

    WallSpritesPool.prototype.addWindowsSprites = function(amount, frameId) {
      var i, sprite, _i, _results;
      _results = [];
      for (i = _i = 1; 1 <= amount ? _i <= amount : _i >= amount; i = 1 <= amount ? ++_i : --_i) {
        sprite = PIXI.Sprite.fromFrame(frameId);
        _results.push(this.windows.push(sprite));
      }
      return _results;
    };

    WallSpritesPool.prototype.borrowWindow = function() {
      return this.windows.shift();
    };

    WallSpritesPool.prototype.returnWindow = function(sprite) {
      return this.windows.push(sprite);
    };

    WallSpritesPool.prototype.createDecorations = function() {
      this.decorations = [];
      this.addDecorationSprites(6, "decoration_01");
      this.addDecorationSprites(6, "decoration_02");
      this.addDecorationSprites(6, "decoration_03");
      return this.shuffle(this.decorations);
    };

    WallSpritesPool.prototype.addDecorationSprites = function(amount, frameId) {
      var i, sprite, _i, _results;
      _results = [];
      for (i = _i = 1; 1 <= amount ? _i <= amount : _i >= amount; i = 1 <= amount ? ++_i : --_i) {
        sprite = PIXI.Sprite.fromFrame(frameId);
        _results.push(this.decorations.push(sprite));
      }
      return _results;
    };

    WallSpritesPool.prototype.borrowDecoration = function() {
      return this.decorations.shift();
    };

    WallSpritesPool.prototype.returnDecoration = function(sprite) {
      return this.decorations.push(sprite);
    };

    WallSpritesPool.prototype.createFrontEdges = function() {
      this.frontEdges = [];
      this.addFrontEdgeSprites(2, "edge_01");
      this.addFrontEdgeSprites(2, "edge_02");
      return this.shuffle(this.frontEdges);
    };

    WallSpritesPool.prototype.addFrontEdgeSprites = function(amount, frameId) {
      var i, sprite, _i, _results;
      _results = [];
      for (i = _i = 1; 1 <= amount ? _i <= amount : _i >= amount; i = 1 <= amount ? ++_i : --_i) {
        sprite = new PIXI.Sprite(PIXI.Texture.fromFrame(frameId));
        _results.push(this.frontEdges.push(sprite));
      }
      return _results;
    };

    WallSpritesPool.prototype.borrowFrontEdge = function() {
      return this.frontEdges.shift();
    };

    WallSpritesPool.prototype.returnFrontEdge = function(sprite) {
      return this.frontEdges.push(sprite);
    };

    WallSpritesPool.prototype.createBackEdges = function() {
      this.backEdges = [];
      this.addBackEdgeSprites(2, "edge_01");
      this.addBackEdgeSprites(2, "edge_02");
      return this.shuffle(this.backEdges);
    };

    WallSpritesPool.prototype.addBackEdgeSprites = function(amount, frameId) {
      var i, sprite, _i, _results;
      _results = [];
      for (i = _i = 1; 1 <= amount ? _i <= amount : _i >= amount; i = 1 <= amount ? ++_i : --_i) {
        sprite = new PIXI.Sprite(PIXI.Texture.fromFrame(frameId));
        sprite.anchor.x = 1;
        sprite.scale.x = -1;
        _results.push(this.backEdges.push(sprite));
      }
      return _results;
    };

    WallSpritesPool.prototype.borrowBackEdge = function() {
      return this.backEdges.shift();
    };

    WallSpritesPool.prototype.returnBackEdge = function(sprite) {
      return this.backEdges.push(sprite);
    };

    WallSpritesPool.prototype.createSteps = function() {
      this.steps = [];
      return this.addStepsSprites(2, "step_01");
    };

    WallSpritesPool.prototype.addStepsSprites = function(amount, frameId) {
      var i, sprite, _i, _results;
      _results = [];
      for (i = _i = 1; 1 <= amount ? _i <= amount : _i >= amount; i = 1 <= amount ? ++_i : --_i) {
        sprite = new PIXI.Sprite(PIXI.Texture.fromFrame(frameId));
        sprite.anchor.y = 0.25;
        _results.push(this.steps.push(sprite));
      }
      return _results;
    };

    WallSpritesPool.prototype.borrowStep = function() {
      return this.steps.shift();
    };

    WallSpritesPool.prototype.returnStep = function(sprite) {
      return this.steps.push(sprite);
    };

    return WallSpritesPool;

  })();

  SliceType = (function() {
    function SliceType() {}

    SliceType.FRONT = 0;

    SliceType.BACK = 1;

    SliceType.STEP = 2;

    SliceType.DECORATION = 3;

    SliceType.WINDOW = 4;

    SliceType.GAP = 5;

    return SliceType;

  })();

  WallSlice = (function() {
    WallSlice.WIDTH = 64;

    function WallSlice(type, y) {
      this.type = type;
      this.y = y;
      this.sprite = null;
    }

    return WallSlice;

  })();

  Walls = (function(_super) {
    __extends(Walls, _super);

    Walls.VIEWPORT_WIDTH = 512;

    Walls.VIEWPORT_NUM_SLICES = Math.ceil(Walls.VIEWPORT_WIDTH / WallSlice.WIDTH) + 1;

    function Walls() {
      Walls.__super__.constructor.call(this, this);
      this.pool = new WallSpritesPool();
      this.createLookupTables();
      this.slices = [];
      this.createTestMap();
      this.viewportX = 0;
      this.viewportSliceX = 0;
    }

    Walls.prototype.createLookupTables = function() {
      this.borrowWallSpriteLookup = [];
      this.borrowWallSpriteLookup[SliceType.FRONT] = this.pool.borrowFrontEdge;
      this.borrowWallSpriteLookup[SliceType.BACK] = this.pool.borrowBackEdge;
      this.borrowWallSpriteLookup[SliceType.STEP] = this.pool.borrowStep;
      this.borrowWallSpriteLookup[SliceType.DECORATION] = this.pool.borrowDecoration;
      this.borrowWallSpriteLookup[SliceType.WINDOW] = this.pool.borrowWindow;
      this.returnWallSpriteLookup = [];
      this.returnWallSpriteLookup[SliceType.FRONT] = this.pool.returnFrontEdge;
      this.returnWallSpriteLookup[SliceType.BACK] = this.pool.returnBackEdge;
      this.returnWallSpriteLookup[SliceType.STEP] = this.pool.returnStep;
      this.returnWallSpriteLookup[SliceType.DECORATION] = this.pool.returnDecoration;
      return this.returnWallSpriteLookup[SliceType.WINDOW] = this.pool.returnWindow;
    };

    Walls.prototype.borrowWallSprite = function(sliceType) {
      return this.borrowWallSpriteLookup[sliceType].call(this.pool);
    };

    Walls.prototype.returnWallSprite = function(sliceType, sliceSprite) {
      return this.returnWallSpriteLookup[sliceType].call(this.pool, sliceSprite);
    };

    Walls.prototype.addSlice = function(sliceType, y) {
      var slice;
      slice = new WallSlice(sliceType, y);
      return this.slices.push(slice);
    };

    Walls.prototype.setViewportX = function(viewportX) {};

    Walls.prototype.createTestWallSpan = function() {
      this.addSlice(SliceType.FRONT, 192);
      this.addSlice(SliceType.WINDOW, 192);
      this.addSlice(SliceType.DECORATION, 192);
      this.addSlice(SliceType.WINDOW, 192);
      this.addSlice(SliceType.DECORATION, 192);
      this.addSlice(SliceType.WINDOW, 192);
      this.addSlice(SliceType.DECORATION, 192);
      this.addSlice(SliceType.WINDOW, 192);
      return this.addSlice(SliceType.BACK, 192);
    };

    Walls.prototype.createTestSteppedWallSpan = function() {
      this.addSlice(SliceType.FRONT, 192);
      this.addSlice(SliceType.WINDOW, 192);
      this.addSlice(SliceType.DECORATION, 192);
      this.addSlice(SliceType.STEP, 256);
      this.addSlice(SliceType.WINDOW, 256);
      return this.addSlice(SliceType.BACK, 256);
    };

    Walls.prototype.createTestGap = function() {
      return this.addSlice(SliceType.GAP);
    };

    Walls.prototype.createTestMap = function() {
      var i, _i, _results;
      _results = [];
      for (i = _i = 1; _i <= 10; i = ++_i) {
        this.createTestWallSpan();
        this.createTestGap();
        this.createTestSteppedWallSpan();
        _results.push(this.createTestGap());
      }
      return _results;
    };

    return Walls;

  })(PIXI.DisplayObjectContainer);

  Main = (function() {
    Main.SCROLL_SPEED = 5;

    function Main() {
      var gameCanvas;
      this.stage = new PIXI.Stage(0x66FF99);
      gameCanvas = document.getElementById("game-canvas");
      this.renderer = new PIXI.autoDetectRenderer(512, 384, gameCanvas);
      this.loadSpriteSheet();
    }

    Main.prototype.update = function() {
      this.scroller.moveViewportXBy(this.constructor.SCROLL_SPEED);
      this.renderer.render(this.stage);
      return requestAnimFrame(this.update.bind(this));
    };

    Main.prototype.loadSpriteSheet = function() {
      var assetsToLoad, loader;
      assetsToLoad = ["/img/game/parallas/bg-far.png", "/img/game/parallas/bg-mid.png", "/img/game/parallas/wall.json"];
      loader = new PIXI.AssetLoader(assetsToLoad);
      loader.onComplete = this.spriteSheetLoaded.bind(this);
      return loader.load();
    };

    Main.prototype.spriteSheetLoaded = function() {
      this.scroller = new Scroller(this.stage);
      return requestAnimFrame(this.update.bind(this));
    };

    return Main;

  })();

  window.init = function() {
    return window.main = new Main();
  };

}).call(this);

//# sourceMappingURL=parallas.map
