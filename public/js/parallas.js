// Generated by CoffeeScript 1.7.1
(function() {
  var Far, Main, Mid, Scroller, WallSpritesPool,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Far = (function(_super) {
    __extends(Far, _super);

    Far.DELTA_X = 0.128;

    function Far() {
      var texture;
      texture = PIXI.Texture.fromImage("/img/game/parallas/bg-far.png");
      Far.__super__.constructor.call(this, texture, 512, 256);
      this.position.x = 0;
      this.position.y = 0;
      this.tilePosition.x = 0;
      this.tilePosition.y = 0;
      this.viewportX = 0;
    }

    Far.prototype.setViewportX = function(newViewportX) {
      var distanceTravelled;
      distanceTravelled = newViewportX - this.viewportX;
      this.viewportX = newViewportX;
      return this.tilePosition.x -= distanceTravelled * this.constructor.DELTA_X;
    };

    return Far;

  })(PIXI.TilingSprite);

  Mid = (function(_super) {
    __extends(Mid, _super);

    Mid.DELTA_X = 0.64;

    function Mid() {
      var texture;
      texture = PIXI.Texture.fromImage("/img/game/parallas/bg-mid.png");
      Mid.__super__.constructor.call(this, texture, 512, 256);
      this.position.x = 0;
      this.position.y = 128;
      this.tilePosition.x = 0;
      this.tilePosition.y = 0;
      this.viewportX = 0;
    }

    Mid.prototype.setViewportX = function(newViewportX) {
      var distanceTravelled;
      distanceTravelled = newViewportX - this.viewportX;
      this.viewportX = newViewportX;
      return this.tilePosition.x -= distanceTravelled * this.constructor.DELTA_X;
    };

    return Mid;

  })(PIXI.TilingSprite);

  Scroller = (function() {
    function Scroller(stage) {
      this.far = new Far();
      stage.addChild(this.far);
      this.mid = new Mid();
      stage.addChild(this.mid);
      this.viewportX = 0;
    }

    Scroller.prototype.setViewportX = function(viewportX) {
      this.viewportX = viewportX;
      this.far.setViewportX(viewportX);
      return this.mid.setViewportX(viewportX);
    };

    Scroller.prototype.getViewportX = function() {
      return this.viewportX;
    };

    Scroller.prototype.moveViewportXBy = function(units) {
      var newViewportX;
      newViewportX = this.viewportX + units;
      return this.setViewportX(newViewportX);
    };

    return Scroller;

  })();

  WallSpritesPool = (function() {
    function WallSpritesPool() {
      this.createWindows();
    }

    WallSpritesPool.prototype.shuffle = function(array) {
      var i, len, pos, shuffles, wallSlice, _i, _results;
      len = array.length;
      shuffles = len * 3;
      _results = [];
      for (i = _i = 1; 1 <= shuffles ? _i <= shuffles : _i >= shuffles; i = 1 <= shuffles ? ++_i : --_i) {
        wallSlice = array.pop();
        pos = Math.floor(Math.random() * (len - 1));
        _results.push(array.splice(pos, 0, wallSlice));
      }
      return _results;
    };

    WallSpritesPool.prototype.createWindows = function() {
      this.windows = [];
      this.addWindowsSprites(6, "window_01");
      this.addWindowsSprites(6, "window_02");
      return this.shuffle(this.windows);
    };

    WallSpritesPool.prototype.addWindowsSprites = function(amount, frameId) {
      var i, sprite, _i, _results;
      _results = [];
      for (i = _i = 1; 1 <= amount ? _i <= amount : _i >= amount; i = 1 <= amount ? ++_i : --_i) {
        sprite = PIXI.Sprite.fromFrame(frameId);
        _results.push(this.windows.push(sprite));
      }
      return _results;
    };

    WallSpritesPool.prototype.borrowWindow = function() {
      return this.windows.shift();
    };

    WallSpritesPool.prototype.returnWindows = function(sprite) {
      return this.windows.push(sprite);
    };

    return WallSpritesPool;

  })();

  Main = (function() {
    Main.SCROLL_SPEED = 5;

    function Main() {
      var gameCanvas;
      this.stage = new PIXI.Stage(0x66FF99);
      gameCanvas = document.getElementById("game-canvas");
      this.renderer = new PIXI.autoDetectRenderer(512, 384, gameCanvas);
      this.loadSpriteSheet();
    }

    Main.prototype.update = function() {
      this.scroller.moveViewportXBy(this.constructor.SCROLL_SPEED);
      this.renderer.render(this.stage);
      return requestAnimFrame(this.update.bind(this));
    };

    Main.prototype.loadSpriteSheet = function() {
      var assetsToLoad, loader;
      assetsToLoad = ["/img/game/parallas/bg-far.png", "/img/game/parallas/bg-mid.png", "/img/game/parallas/wall.json"];
      loader = new PIXI.AssetLoader(assetsToLoad);
      loader.onComplete = this.spriteSheetLoaded.bind(this);
      return loader.load();
    };

    Main.prototype.spriteSheetLoaded = function() {
      this.scroller = new Scroller(this.stage);
      requestAnimFrame(this.update.bind(this));
      this.pool = new WallSpritesPool();
      return this.wallSlices = [];
    };

    Main.prototype.borrowWallSprites = function(num) {
      var i, sprite, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = num - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        sprite = this.pool.borrowWindow();
        sprite.position.x = -32 + (i * 64);
        sprite.position.y = 128;
        this.wallSlices.push(sprite);
        _results.push(this.stage.addChild(sprite));
      }
      return _results;
    };

    Main.prototype.returnWallSprites = function() {
      var i, sprite, _i, _ref;
      for (i = _i = 0, _ref = this.wallSlices.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        sprite = this.wallSlices[i];
        this.stage.removeChide(sprite);
        this.pool.returnWindow(sprite);
      }
      return this.wallSlices = [];
    };

    return Main;

  })();

  window.init = function() {
    return window.main = new Main();
  };

}).call(this);

//# sourceMappingURL=parallas.map
