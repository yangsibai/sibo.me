// Generated by CoffeeScript 1.7.1

/*
Module dependencies.
 */

(function() {
  var app, cluster, config, express, http, i, numCPUs, path, worker, _, _i;

  express = require("express");

  http = require("http");

  path = require("path");

  config = require("./config");

  app = express();

  _ = require("underscore");

  cluster = require('cluster');

  numCPUs = require('os').cpus().length;

  app.use(express.favicon(__dirname + "/public/favicon.ico"));

  app.use(express.json());

  app.use(express.urlencoded());

  app.use(express.methodOverride());

  app.use(app.router);

  app.use(express["static"](path.join(__dirname, "public")));

  app.use(express.cookieParser('sibo.me'));

  require("multi-process-session")(app);

  if (!config.isProduct()) {
    app.use(express.errorHandler());
  }

  app.use(function(req, res, next) {
    res.err = function(err) {
      return res.send({
        code: 1,
        message: err.message
      });
    };
    res.data = function(data) {
      if (_.isUndefined(data.code)) {
        data.code = 0;
      }
      if (_.isUndefined(data.message)) {
        data.message = "ok";
      }
      return res.send(data);
    };
    res.ok = function() {
      return res.send({
        code: 0,
        message: "ok"
      });
    };
    return next();
  });

  require("simple-mvc")({
    defaultEngine: "jade",
    defaultViewEngine: "jade"
  }, app);

  app.use(function(req, res) {
    return res.send("404:not found!");
  });

  app.use(function(err, req, res) {
    return res.send("500:server error!");
  });

  process.on("uncaughtException", function(err) {
    return console.dir(err);
  });

  if (cluster.isMaster) {
    for (i = _i = 1; 1 <= numCPUs ? _i <= numCPUs : _i >= numCPUs; i = 1 <= numCPUs ? ++_i : --_i) {
      cluster.fork();
    }
    cluster.on('death', function(worker) {
      console.log("" + worker.id + " dir");
      return cluster.fork();
    });
  } else {
    worker = cluster.worker;
    http.createServer(app).listen(config.port.app, function() {
      return console.log("worker " + worker.id + " listening on port " + config.port.app);
    });
  }

}).call(this);

//# sourceMappingURL=app.map
